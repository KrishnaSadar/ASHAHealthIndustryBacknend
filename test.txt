---

### **API Endpoint Reference for Testing**

Here is a guide to test every endpoint on your server. Use a tool like Postman or `curl`.

**Base URL:** `http://localhost:5001` (or your Vercel URL)

#### **Villagers**

* **Add Villager**
    * **Request:** `POST /api/v1/villagers`
    * **Body (JSON):**
        ```json
        {
          "mobile_no": "9876543210",
          "name": "Ramesh",
          "last_name": "Patil",
          "latitude": 21.0077,
          "longitude": 75.5626,
          "age": 45,
          "gender": "Male"
        }
        ```

---

#### **Complaints**

* **Add Patient Request**
    * **Request:** `POST /api/v1/patient-requests`
    * **Body (JSON):** (Replace `"user_id"` with a valid Villager ID)
        ```json
        {
          "user_id": "656b6a48f5a2a22f3f9e9a1b",
          "state": "Maharashtra",
          "district": "Jalgaon",
          "zone": "Zone-A",
          "symptoms": ["Fever", "Headache"],
          "age": 45,
          "complaint": "Feeling unwell for the past three days with a high fever.",
          "days": 3
        }
        ```
* **Add Dirty Water Complaint**
    * **Request:** `POST /api/v1/dirty-water-complaints`
    * **Body (JSON):** (Replace `"user_id"` with a valid Villager ID)
        ```json
        {
          "user_id": "656b6a48f5a2a22f3f9e9a1b",
          "state": "Maharashtra",
          "district": "Jalgaon",
          "zone": "Zone-A",
          "age": 45,
          "complaint": "The water from the main tap is brown and smells bad.",
          "photo": "https://example.com/images/dirty_water.jpg"
        }
        ```
* **Update Complaint Status**
    * **Request:** `PUT /api/v1/complaints/{complaintId}/status` (Replace `{complaintId}` with a real ID)
    * **Body (JSON):**
        ```json
        { "status": 2 }
        ```
* **Get Patient Complaints**
    * **Request:** `GET /api/v1/patient-requests?zone=Zone-A&status=1&limit=5`
* **Get Dirty Water Complaints**
    * **Request:** `GET /api/v1/dirty-water-complaints?status=1`

---

#### **Workers & Auth**

* **Add Worker (Admin)**
    * **Request:** `POST /api/v1/workers`
    * **Headers:** `Authorization: Bearer your_static_admin_bearer_token_for_protected_routes`
    * **Body (JSON):**
        ```json
        {
          "user_id": "asha_worker_01",
          "password": "password123",
          "mobile_no": "8877665544",
          "name": "Sunita",
          "last_name": "Sharma",
          "alloted_zone": "Zone-A",
          "age": 35,
          "gender": "Female"
        }
        ```
* **Worker Login**
    * **Request:** `POST /api/v1/auth/worker/login`
    * **Body (JSON):**
        ```json
        {
          "user_id": "asha_worker_01",
          "password": "password123"
        }
        ```
* **Delete Worker (Admin)**
    * **Request:** `DELETE /api/v1/workers/asha_worker_01`
    * **Headers:** `Authorization: Bearer your_static_admin_bearer_token_for_protected_routes`
* **Set Worker Zone (Admin)**
    * **Request:** `PUT /api/v1/workers/asha_worker_01/zone`
    * **Headers:** `Authorization: Bearer your_static_admin_bearer_token_for_protected_routes`
    * **Body (JSON):**
        ```json
        { "zone": "Zone-C" }
        ```
* **Set Worker Status (Admin)**
    * **Request:** `PUT /api/v1/workers/asha_worker_01/status`
    * **Headers:** `Authorization: Bearer your_static_admin_bearer_token_for_protected_routes`
    * **Body (JSON):**
        ```json
        { "status": 0 }
        ```

---

#### **Predictions**

* **Trigger Prediction**
    * **Request:** `POST /api/v1/predictions/trigger`
    * **Body (JSON):**
        ```json
        [
          { "zone": "Zone-A", "symptoms": ["Fever","Cough"], "ph": 7.1, "turbidity": 2.3 },
          { "zone": "Zone-B", "symptoms": ["Diarrhea"], "ph": 6.8, "turbidity": 3.1 }
        ]
        ```
* **Get Zone Prediction**
    * **Request:** `GET /api/v1/predictions/Zone-A`

---

#### **Help Requests**

Of course. Here are the required changes to add doctorsRequired to your help requests and implement a DELETE endpoint.

## 1. Update the HelpRequest Model
First, add the new field to your Mongoose schema.

File to Edit: models/HelpRequest.js

Add doctorsRequired to the schema.

JavaScript

const mongoose = require('mongoose');

const helpRequestSchema = new mongoose.Schema({
  zone: { type: String, required: true },
  workerId: { type: String, ref: 'AshaWorker', required: false },
  doctorsRequired: { type: Number, required: true }, // Add this line
}, { timestamps: { createdAt: 'createdAt', updatedAt: false } });

module.exports = mongoose.model('HelpRequest', helpRequestSchema);
## 2. Update the Validation Schema
Next, update the Joi validation schema to require the new field.

File to Edit: utils/validationSchemas.js

Find the addHelpRequestSchema and add the doctorsRequired validation.

JavaScript

// Find this schema and add the new field
const addHelpRequestSchema = Joi.object({
  zone: Joi.string().required(),
  workerId: Joi.string().optional(),
  doctorsRequired: Joi.number().integer().min(1).required(), // Add this line
});
## 3. Update the Controller
Now, update the controller to handle saving the new field and add a function for deleting requests.

File to Edit: controllers/helpRequestController.js

Modify the addHelpRequest function and add a new deleteHelpRequest function.

JavaScript

const asyncHandler = require('express-async-handler');
const HelpRequest = require('../models/HelpRequest');
const { addHelpRequestSchema } = require('../utils/validationSchemas');

/**
 * @desc    Create a new help request
 * @route   POST /api/v1/help-requests
 * @access  Worker (if authenticated)
 */
const addHelpRequest = asyncHandler(async (req, res) => {
  const workerId = req.worker ? req.worker._id : req.body.workerId;

  const { error, value } = addHelpRequestSchema.validate({ ...req.body, workerId });
   if (error) {
    res.status(400);
    throw new Error(error.details[0].message);
  }

  const helpRequest = await HelpRequest.create({
    zone: value.zone,
    workerId: value.workerId,
    doctorsRequired: value.doctorsRequired, // Add this line
  });

  res.status(201).json({
    success: true,
    helpRequestId: helpRequest._id,
  });
});

/**
 * @desc    Delete a help request
 * @route   DELETE /api/v1/help-requests/:id
 * @access  Admin
 */
const deleteHelpRequest = asyncHandler(async (req, res) => {
  const helpRequest = await HelpRequest.findById(req.params.id);

  if (!helpRequest) {
    res.status(404);
    throw new Error('Help request not found');
  }

  await helpRequest.deleteOne();

  res.status(200).json({ success: true, message: 'Help request deleted' });
});

// Update your module exports
module.exports = {
  addHelpRequest,
  deleteHelpRequest, // Add the new function
};
## 4. Update the Routes
Finally, add the new DELETE route. For security, we'll protect it so only an admin can delete requests.

File to Edit: routes/helpRequestRoutes.js

Import the new controller and middleware, and add the delete route.

JavaScript

const express = require('express');
const router = express.Router();
const { addHelpRequest, deleteHelpRequest } = require('../controllers/helpRequestController');
const { protectWorker } = require('../middleware/authMiddleware');
const { protectAdmin } = require('../middleware/authMiddleware'); // You might need to import this if you removed it

router.post('/', protectWorker, addHelpRequest);

// Add this new route for deleting
router.delete('/:id', protectAdmin, deleteHelpRequest);

module.exports = router;
## How to Test on Postman
After restarting your server, you can use these tests.

### Test Case 1: Create a Help Request (Updated)
Method: POST
URL: /api/v1/help-requests

Headers:
Content-Type: application/json
Body (raw, JSON):

JSON

{
    "zone": "Zone-A",
    "doctorsRequired": 3
}
### Test Case 2: Delete a Help Request
Method: DELETE

URL: /api/v1/help-requests/<help_request_id>

Method: GET

URL: http://localhost:5001/api/v1/villagers

GET
URL: http://localhost:5001/api/v1/workers